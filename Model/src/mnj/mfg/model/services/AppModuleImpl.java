package mnj.mfg.model.services;

import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;

import mnj.mfg.model.lovviews.FabOuncePopUpVOImpl;
import mnj.mfg.model.lovviews.NewBalancePopUpImpl;
import mnj.mfg.model.lovviews.TransferRollHeaderVOImpl;
import mnj.mfg.model.services.common.AppModule;

import mnj.mfg.model.views.FabricShadeLineImpl;
import mnj.mfg.model.views.FabricShrinkLinesImpl;


import mnj.mfg.model.views.FebricOunceDetailViewImpl;
import mnj.mfg.model.views.FebricOunceLineViewImpl;

import mnj.mfg.model.views.InvPageDetailsVOImpl;
import mnj.mfg.model.views.MnjMfgFabinsPtrnalocLViewImpl;
import mnj.mfg.model.views.ProdPageLinesVOImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.OracleTypes;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 18 12:17:07 BDT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleImpl extends ApplicationModuleImpl implements AppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleImpl() {
    }

    /**
     * Container's getter for HeaderVO1.
     * @return HeaderVO1
     */
    public ViewObjectImpl getHeaderVO1() {
        return (ViewObjectImpl)findViewObject("HeaderVO1");
    }


    public void setSessionValues(String orgId, String userId, String respId,
                                 String respAppl) {


        System.out.println("SEeesion called-------");
        if (userId != null) {
            String flag = getFormValue(respId);
            System.out.println(respId + "From Value---->" + flag);
            FacesContext fctx = FacesContext.getCurrentInstance();
            ExternalContext ectx = fctx.getExternalContext();
            HttpSession userSession = (HttpSession)ectx.getSession(false);
            userSession.setAttribute("FormVal", flag);
            userSession.setAttribute("userId", userId);
            userSession.setAttribute("orgId", orgId);
            userSession.setAttribute("respId", respId);
            userSession.setAttribute("unitName", getUnitName(orgId));
            
        }
       
    }


    public void Detele_All_RecordsLines() {
        getDBTransaction().commit();
        ViewObject vo = getInvPageLinesDet2VO1();
        String HeaderId = vo.getCurrentRow().getAttribute("LineId").toString();
        Integer PHeaderId = Integer.parseInt(HeaderId);
        CallableStatement plSqlBlock = null;
        String Statement =
            "BEGIN DELETE FROM MNJ_MFG_FABINS_INVL_D2 WHERE TRANSFER_SELECTION = 'Y' and LINE_ID = " +
            PHeaderId + ";" + "COMMIT; END;";
        plSqlBlock = getDBTransaction().createCallableStatement(Statement, 0);
        try {
            plSqlBlock.execute();
            vo.executeQuery();
            System.out.println("Query for delete is.... " + vo.getQuery());

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    public String getUnitName(String orgId) {

        ViewObject vo = getOperatingUnit1();
        vo.setWhereClause("OPERATING_UNIT = " + orgId);
        vo.executeQuery();
        String name = null;
        vo.first();

        try {
            name = vo.getCurrentRow().getAttribute("Name").toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return name;

    }


    public String getFormValue(String respId) {

        String status = null;
        String stmt =
            "BEGIN :1 := mnj_fabric_ins_pkg.fabric_ins_getKey(:2); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        int a = 0;
        try {
            cs.setString(2, respId);
            cs.registerOutParameter(1, OracleTypes.VARCHAR);
            cs.execute();
            status = cs.getString(1);
            cs.close();
        } catch (Exception e) {
            //status = e.getMessage();
            ;
        }
        System.out.println("Value Flag--->" + status);
        return status;


    }


    public Row createLines() {

        ViewObject vo = getFabricShrinkLines1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader


    public Row createShadeLines() {

        ViewObject vo = getProdPageShedDetVO1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader


    public String getPopulateValue(Row r, String columnName) {

        String value = null;
        try {
            value = r.getAttribute(columnName).toString();
        } catch (Exception e) {
            ;
        }
        return value;
    }


    public void populateShrink() {


        ViewObject populatevo = getInvColorWiseRols1();
        // populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();
        System.out.println("Drop ------->" + r.length);
        for (Row row : r) {

            if (row.getAttribute("Flag") != null &&
                row.getAttribute("Flag").equals("Y")) {
                System.out.println("Flag --->" + row.getAttribute("Flag"));
                populateLinesTest(row);
            }
        }
    }

    public void populateShade() {


        ViewObject populatevo = getProdShadeRollsVO1();
        // populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();
        System.out.println("Drop ------->" + r.length);
        for (Row row : r) {

            if (row.getAttribute("ProdShdFlag") != null &&
                row.getAttribute("ProdShdFlag").equals("Y")) {

                populateLinesShade(row);
            }
        }

        getDBTransaction().commit();
    }

    public void populateLinesTest(Row poprow) {


        Row linerow = createLines();
        linerow.setAttribute("LineType", "P");
        linerow.setAttribute("RollNo", getPopulateValue(poprow, "RollNo"));
        linerow.setAttribute("SuppRollNo",
                             getPopulateValue(poprow, "RollNoNew"));
        linerow.setAttribute("RollLength",
                             getPopulateValue(poprow, "RollLength"));
        linerow.setAttribute("RollLength2",
                             getPopulateValue(poprow, "RollLength2"));
        linerow.setAttribute("RollWidth",
                             getPopulateValue(poprow, "RollWidth"));

        double rolWidth = 0.0, adjustCutWidth = 0.0;
        try {
            rolWidth =
                    Double.parseDouble(getPopulateValue(poprow, "RollWidth"));
            adjustCutWidth =
                    Double.parseDouble(getProdPageLinesVO1().getCurrentRow().getAttribute("DjCutWidth").toString()); //DjCutWidth
        } catch (Exception e) {
            ;
        }
        linerow.setAttribute("CutWidth", (rolWidth - adjustCutWidth));
        linerow.setAttribute("AlocYard",
                             getPopulateValue(poprow, "RollLength"));
        linerow.setAttribute("AlocInch",
                             getPopulateValue(poprow, "RollLength2"));
        linerow.setAttribute("RawItemId",
                             getPopulateValue(poprow, "InventoryItemId"));
    } //end of populateLines

    public void populateLinesShade(Row poprow) {


        Row linerow = createShadeLines();

        linerow.setAttribute("RollNo", getPopulateValue(poprow, "RollNo"));
        linerow.setAttribute("SupplierRollNo",
                             getPopulateValue(poprow, "SuppRollNo"));


    } //end of populateLines

    public void selectAllLines(String flag) {


        ViewObject populatevo = getInvColorWiseRols1();
        //populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();

        for (Row row : r) {
            System.out.println("Loop select");
            row.setAttribute("Flag", flag);
            System.out.println("Get select ---->" + row.getAttribute("Flag"));

        }
    }

    public void selectAllLinesFabricShade(String flag) {


        ViewObject populatevo = getProdShadeRollsVO1();
        //populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();

        for (Row row : r) {
            System.out.println("Loop select");
            row.setAttribute("ProdShdFlag", flag);
            System.out.println("Get select ---->" +
                               row.getAttribute("ProdShdFlag"));

        }
    }

    public void selectAllLinesFabricRollInsp(String flag) {


        ViewObject populatevo = getProdFbShrnkRollVO1();
        //populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();

        for (Row row : r) {
            System.out.println("Loop select");
            row.setAttribute("SelpRol", flag);
            System.out.println("Get select ---->" +
                               row.getAttribute("SelpRol"));

        }
    }


    public double getPassFailVal(String buyer) {

        double value = 0.0;
        String stmt =
            "BEGIN :1 := mnj_fabric_ins_pkg.fabIs_buyer_passfail(:2); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        int a = 0;
        try {
            cs.setString(2, buyer);
            cs.registerOutParameter(1, OracleTypes.INTEGER);
            cs.execute();
            value = cs.getInt(1);
            cs.close();
        } catch (Exception e) {
            //status = e.getMessage();
            ;
        }
        //        System.out.println("Pass Fail value --------->>" + value);
        return value;


    }


    /**
     * Container's getter for InvPageLinesVO1.
     * @return InvPageLinesVO1
     */
    public ViewObjectImpl getInvPageLinesVO1() {
        return (ViewObjectImpl)findViewObject("InvPageLinesVO1");
    }

    /**
     * Container's getter for HeaderInvPageLinesVL1.
     * @return HeaderInvPageLinesVL1
     */
    public ViewLinkImpl getHeaderInvPageLinesVL1() {
        return (ViewLinkImpl)findViewLink("HeaderInvPageLinesVL1");
    }

    /**
     * Container's getter for InvPageDetailsVO1.
     * @return InvPageDetailsVO1
     */
    public ViewObjectImpl getInvPageDetailsVO1() {
        return (ViewObjectImpl)findViewObject("InvPageDetailsVO1");
    }

    /**
     * Container's getter for InvPageLinesDetVL1.
     * @return InvPageLinesDetVL1
     */
    public ViewLinkImpl getInvPageLinesDetVL1() {
        return (ViewLinkImpl)findViewLink("InvPageLinesDetVL1");
    }


    /**
     * Container's getter for InvPageLinesDet2VO1.
     * @return InvPageLinesDet2VO1
     */
    public ViewObjectImpl getInvPageLinesDet2VO1() {
        return (ViewObjectImpl)findViewObject("InvPageLinesDet2VO1");
    }

    /**
     * Container's getter for InvPageLinesDet2VL1.
     * @return InvPageLinesDet2VL1
     */
    public ViewLinkImpl getInvPageLinesDet2VL1() {
        return (ViewLinkImpl)findViewLink("InvPageLinesDet2VL1");
    }

    /**
     * Container's getter for ProdPageLinesVO1.
     * @return ProdPageLinesVO1
     */
    public ViewObjectImpl getProdPageLinesVO1() {
        return (ViewObjectImpl)findViewObject("ProdPageLinesVO1");
    }

    /**
     * Container's getter for HeaderProdPageLinesVL1.
     * @return HeaderProdPageLinesVL1
     */
    public ViewLinkImpl getHeaderProdPageLinesVL1() {
        return (ViewLinkImpl)findViewLink("HeaderProdPageLinesVL1");
    }

    /**
     * Container's getter for FabricShrinkLines1.
     * @return FabricShrinkLines1
     */
    public FabricShrinkLinesImpl getFabricShrinkLines1() {
        return (FabricShrinkLinesImpl)findViewObject("FabricShrinkLines1");
    }

    /**
     * Container's getter for MnjMfgFabricInsTestLFkLink1.
     * @return MnjMfgFabricInsTestLFkLink1
     */
    public ViewLinkImpl getMnjMfgFabricInsTestLFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjMfgFabricInsTestLFkLink1");
    }

    /**
     * Container's getter for FabricShadeLine1.
     * @return FabricShadeLine1
     */
    public FabricShadeLineImpl getFabricShadeLine1() {
        return (FabricShadeLineImpl)findViewObject("FabricShadeLine1");
    }

    /**
     * Container's getter for MnjMfgFabricInsTestShdPkLink1.
     * @return MnjMfgFabricInsTestShdPkLink1
     */
    public ViewLinkImpl getMnjMfgFabricInsTestShdPkLink1() {
        return (ViewLinkImpl)findViewLink("MnjMfgFabricInsTestShdPkLink1");
    }


    /**
     * Container's getter for ProdPageShedDetVO1.
     * @return ProdPageShedDetVO1
     */
    public ViewObjectImpl getProdPageShedDetVO1() {
        return (ViewObjectImpl)findViewObject("ProdPageShedDetVO1");
    }

    /**
     * Container's getter for ProdPagShedDetVL1.
     * @return ProdPagShedDetVL1
     */
    public ViewLinkImpl getProdPagShedDetVL1() {
        return (ViewLinkImpl)findViewLink("ProdPagShedDetVL1");
    }

    public double getTotalRollsYards(String type, String headerid,
                                     String color) {

        double totalRoll = 0.0, totalYrds = 0.0;
        System.out.println("Type in AM------->" + type);
        System.out.println("Type in Header ID------->" + getHeaderId());
        System.out.println("Type in Color ------->" + getColor());
        String stmt =
            "BEGIN  mnj_fabric_ins_pkg.getInvTotalRollsYards(:1, :2, :3 , :4); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        int a = 0;
        try {
            cs.registerOutParameter(3, OracleTypes.NUMBER);
            cs.registerOutParameter(4, OracleTypes.NUMBER);
            cs.setString(1, getHeaderId());
            cs.setString(2, getColor());

            cs.execute();
            totalRoll = cs.getDouble(3);
            totalYrds = cs.getDouble(4);
            cs.close();
        } catch (Exception e) {
            //status = e.getMessage();
            ;
        }
        System.out.println("Rolls - >" + totalRoll);
        System.out.println("Yards - >" + totalYrds);
        if (type.equalsIgnoreCase("R")) {
            return totalRoll;
        } else if (type.equalsIgnoreCase("Y")) {
            return totalYrds;
        }

        return 0;


    }

    public String getHeaderId() {

        ViewObject vo = getHeaderVO1();

        String headerId =
            vo.getCurrentRow().getAttribute("HeaderId").toString();
        return headerId;

    }

    public String getColor() {

        ViewObject vo = getProdPageLinesVO1();

        String color = null;

        try {
           color = vo.getCurrentRow().getAttribute("Color").toString(); 
           // color = vo.getCurrentRow().getAttribute("Color").toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return color;

    }

    public String getRawColor() {

        ViewObject vo = getProdPageLinesVO1();

        String color = null;

        try {
            color = vo.getCurrentRow().getAttribute("RawColor").toString();
        } catch (NullPointerException e) {
            color = "null";
            } catch (Exception ex){
                ex.printStackTrace();
            }
        return color;

    }

    public String getStyle() {

        ViewObject vo = getProdPageLinesVO1();

        String style = null;

        try {
            style = vo.getCurrentRow().getAttribute("Style").toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return style;

    }


    public void setColorWiseWherClause() {
        
        try {
            // getDBTransaction().commit();
            ViewObject vo = getInvColorWiseRols1();
            //vo.setWhereClause("HEADER_ID = "+getHeaderId()+" AND COLOR = '"+ getColor()+"'"+" AND STYLE = '"+ getStyle()+"'");
            //System.out.println("HEADER_ID = "+getHeaderId()+" AND COLOR = '"+ getColor()+"'"+" AND STYLE = '"+ getStyle()+"'");
            //
            if (getRawColor().equals("null")){
                System.out.println("enter in if raw color is null......");
                vo.setWhereClause("HEADER_ID = " + getHeaderId());
            }else{
                System.out.println("enter in else raw color <> null......");
                vo.setWhereClause("HEADER_ID = " + getHeaderId() + " AND COLOR = '" +
                              getRawColor() + "'");
            }
            System.out.println("HEADER_ID = " + getHeaderId() + " AND COLOR = '" +
                               getRawColor() + "'");

            //vo.setWhereClause("HEADER_ID = "+getHeaderId());
            vo.executeQuery();
            System.out.println("Populate Query: " + '\n' + vo.getQuery());
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        
    }

    /**
     * Container's getter for InvColorWiseRols1.
     * @return InvColorWiseRols1
     */
    public ViewObjectImpl getInvColorWiseRols1() {
        return (ViewObjectImpl)findViewObject("InvColorWiseRols1");
    }


    public void createShedLines() {

        ViewObject vo = getFabricShadeLine1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        // return row;
    } //end of createHeader


    public String getRolPopWherQuery(String type) {

        ViewObject vo = getProdPageLinesVO1();
        String lineId = vo.getCurrentRow().getAttribute("ProdLId").toString();

        String fabricInspectionQuery = " AND ROLL_NO NOT IN (SELECT \n" +
            "                         MMFS.ROLL_NO \n" +
            "                     FROM MNJ_MFG_FABINS_SECND_D MMFS,MNJ_MFG_FABINS_FIRST_D MMFI\n" +
            "                    WHERE MMFI.LINE_ID                 = MMFS.LINE_ID\n" +
            "                      AND " + lineId +
            "                  = MMFI.PROD_L_ID \n" +
            "                      AND MMFS.ROLL_NO                 = ROLL_NO )";

        String fabOunceQuery = " AND ROLL_NO NOT IN (SELECT OD.ROLL_NO \n" +
            "                FROM MNJ_FABRI_COUNCE_DETAIL OD,\n" +
            "                     MNJ_FABRI_COUNCE_LINE OL\n" +
            "                WHERE OD.LINE_ID = OL.LINE_ID \n" +
            "                AND " + lineId + "  = OL.PROD_L_ID \n" +
            "                AND OD.ROLL_NO =  ROLL_NO) ";
        String patternAlocQuery = "";
        String fabShadeQuery = "";
        String none = " AND 1=1";
        if (type != null && type.equals("FBIN"))
            return fabricInspectionQuery;
        else if (type != null && type.equals("FBOUNC"))
            return fabOunceQuery;


        return none;

    }

    public void setFabInsRollWhrCls(String type) {
        
        
   //commented on 17 .may .18 , filter done with view link     
        
        
//        ViewObject vo = getFabOuncePopUpVO1();
//
//        // vo.setWhereClause("HEADER_ID = "+getHeaderId()+"and COLOR = '"+getColor()+"'");
//        //   vo.setWhereClause("HEADER_ID = "+getHeaderId()+" and COLOR = '"+getColor()+"'  "+getRolPopWherQuery(type));
//        vo.setWhereClause("HEADER_ID = " + getHeaderId() + " AND COLOR = '" +
//                          getColor() + "'" + " AND STYLE = '" + getStyle() +
//                          "'");
//        System.out.println("Get query --------------------------------------->" +
//                           vo.getQuery());
//        vo.executeQuery();
//
//
//        ViewObject vo1 = getProdFbShrnkRollVO1();
//        vo1.setWhereClause("HEADER_ID = " + getHeaderId() + " AND COLOR = '" +
//                           getColor() + "'" + " AND STYLE = '" + getStyle() +
//                           "'");
//        System.out.println("Get query --------------------------------------->" +
//                           vo.getQuery());
//        vo1.executeQuery();


    }

    public void setPtrnAlocRollsWhere() {
        // getDBTransaction().commit();
        ViewObject vo = getProdPatternAlocRolsVO1();
        System.out.println("Here in Sabih where Clasue 1 ....");
        // vo.setWhereClause("HEADER_ID = "+getHeaderId()+"and COLOR = '"+getColor()+"'");
        // vo.setWhereClause("HEADER_ID = "+getHeaderId()+" and ROLL_LENGTH BETWEEN '"+getMinLength()+"'"+" and '"+getMaxLength()+"'");
        //  System.out.println("HEADER_ID = "+getHeaderId()+" and ROLL_LENGTH BETWEEN '"+getMinLength()+"'"+" and '"+getMaxLength()+"'");
        // Correct     vo.setWhereClause("HEADER_ID = "+getHeaderId()+" and SHRINK_PRC_LENGTH BETWEEN "+getMinLength()+" and "+getMaxLength());
        // Correct     System.out.println("HEADER_ID = "+getHeaderId()+" and SHRINK_PRC_LENGTH BETWEEN "+getMinLength()+" and "+getMaxLength());
        vo.setWhereClause("HEADER_ID = " + getHeaderId() + " AND COLOR = '" +
                          getColor() + "'" + 
                          " and SHRINK_PRC_LENGTH BETWEEN " + getMinLength() +
                          " and " + getMaxLength() +
                          " and SHRINK_PRC_WIDTH BETWEEN NVL(" +
                          getMinWidth() + ",SHRINK_PRC_WIDTH)" + " and NVL(" +
                          getMaxWidth() + ",SHRINK_PRC_WIDTH)");
        System.out.println("HEADER_ID = " + getHeaderId() + " AND COLOR = '" +
                          getColor() + "'" + 
                           " and SHRINK_PRC_LENGTH BETWEEN " + getMinLength() +
                           " and " + getMaxLength() +
                           " and SHRINK_PRC_WIDTH BETWEEN NVL(" +
                           getMinWidth() + ",SHRINK_PRC_WIDTH)" + " and NVL(" +
                           getMaxWidth() + ",SHRINK_PRC_WIDTH)");
        vo.executeQuery();
    }

    public void setProdShadeRolsWhereClause() {
        // getDBTransaction().commit();

    // commented on 17.may.18  , filter made by view link  ,   referred by   Md. Rabiul Alam 

//        ViewObject vo = getProdShadeRollsVO1();
//        
//        vo.setWhereClause("HEADER_ID = " + getHeaderId() + " AND COLOR = '" +
//                          getColor() + "'" + " AND STYLE = '" + getStyle() +
//                          "'");
//        vo.executeQuery();
    }

    public void popuFabInsRoll() {


        ViewObject populatevo = getProdFbShrnkRollVO1();
        // populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();
        System.out.println("Drop ------->" + r.length);
        for (Row row : r) {

            if (row.getAttribute("SelpRol") != null &&
                row.getAttribute("SelpRol").equals("Y")) {
                insertFabInsRol(row);
            }
        }
    }

    public void insertFabInsRol(Row poprow) {


        Row linerow = insertRowsInFabIns();
        linerow.setAttribute("RollNo", getPopulateValue(poprow, "RollNo"));
        linerow.setAttribute("CutWidth", getPopulateValue(poprow, "CutWidth"));
        linerow.setAttribute("ActualLength",
                             getPopulateValue(poprow, "AlocYard"));
        linerow.setAttribute("ActualLengthInch",
                             getPopulateValue(poprow, "AlocInch"));
        linerow.setAttribute("SupplierRollNo",
                             getPopulateValue(poprow, "SuppRollNo"));


    } //end of populateLines

    public Row insertRowsInFabIns() {

        ViewObject vo = getMnjMfgFabinsSecndDView1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader

    /**
     * Container's getter for DefectCodeVO1.
     * @return DefectCodeVO1
     */
    public ViewObjectImpl getDefectCodeVO1() {
        return (ViewObjectImpl)findViewObject("DefectCodeVO1");
    }

    public void popDefectCode() {


        ViewObject populatevo = getDefectCodeVO1();
        // populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();
        System.out.println("Drop ------->" + r.length);
        for (Row row : r) {

            if (row.getAttribute("SelDef") != null &&
                row.getAttribute("SelDef").equals("Y")) {
                traDefectCode(row);
            }
        }
    } //end of method

    public void traDefectCode(Row poprow) {


        Row linerow = createDefectLines();

        linerow.setAttribute("DefectCode",
                             getPopulateValue(poprow, "FlexValue"));
        linerow.setAttribute("DefectName",
                             getPopulateValue(poprow, "Description"));


    } //end of populateLines

    public Row createDefectLines() {

        ViewObject vo = getMnjMfgFabinsSecndD2View1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader

    public void popuOunceRoll() {


        ViewObject populatevo = getFabOuncePopUpVO1();
        // populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();
        System.out.println("Drop ------->" + r.length);
        for (Row row : r) {
            System.out.println("Ounce PopUpValue ------->" +
                               row.getAttribute("Selection"));
            if (row.getAttribute("Selection") != null &&
                row.getAttribute("Selection").equals("Y")) {
                insertOunceRoll(row);
            }
        }
    }


    public void insertOunceRoll(Row poprow) {


        Row linerow = insertRowsInOunce();
        linerow.setAttribute("RollNo", getPopulateValue(poprow, "RollNo"));
        linerow.setAttribute("SupplierRollNo",
                             getPopulateValue(poprow, "SuppRollNo"));

    } //end of populateLines


    public Row insertRowsInOunce() {

        ViewObject vo = getFebricOunceDetailView1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader


    /**
     * Container's getter for ProdPageFirstDetVO1.
     * @return ProdPageFirstDetVO1
     */
    public ViewObjectImpl getProdPageFirstDetVO1() {
        return (ViewObjectImpl)findViewObject("ProdPageFirstDetVO1");
    }

    /**
     * Container's getter for ProdPageLinesFirstDetVL1.
     * @return ProdPageLinesFirstDetVL1
     */
    public ViewLinkImpl getProdPageLinesFirstDetVL1() {
        return (ViewLinkImpl)findViewLink("ProdPageLinesFirstDetVL1");
    }


    /**
     * Container's getter for MnjMfgFabinsSecndDView1.
     * @return MnjMfgFabinsSecndDView1
     */
    public ViewObjectImpl getMnjMfgFabinsSecndDView1() {
        return (ViewObjectImpl)findViewObject("MnjMfgFabinsSecndDView1");
    }

    /**
     * Container's getter for HeaderDetailsVL1.
     * @return HeaderDetailsVL1
     */
    public ViewLinkImpl getHeaderDetailsVL1() {
        return (ViewLinkImpl)findViewLink("HeaderDetailsVL1");
    }

    /**
     * Container's getter for MnjMfgFabinsSecndD2View1.
     * @return MnjMfgFabinsSecndD2View1
     */
    public ViewObjectImpl getMnjMfgFabinsSecndD2View1() {
        return (ViewObjectImpl)findViewObject("MnjMfgFabinsSecndD2View1");
    }

    /**
     * Container's getter for MnjMfgFabinsSecndD2Fk1Link1.
     * @return MnjMfgFabinsSecndD2Fk1Link1
     */
    public ViewLinkImpl getMnjMfgFabinsSecndD2Fk1Link1() {
        return (ViewLinkImpl)findViewLink("MnjMfgFabinsSecndD2Fk1Link1");
    }

    /**
     * Container's getter for FebricOunceLineView1.
     * @return FebricOunceLineView1
     */
    public FebricOunceLineViewImpl getFebricOunceLineView1() {
        return (FebricOunceLineViewImpl)findViewObject("FebricOunceLineView1");
    }

    /**
     * Container's getter for MnjMfgTestFkLink1.
     * @return MnjMfgTestFkLink1
     */
    public ViewLinkImpl getMnjMfgTestFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjMfgTestFkLink1");
    }

    /**
     * Container's getter for FebricOunceDetailView1.
     * @return FebricOunceDetailView1
     */
    public FebricOunceDetailViewImpl getFebricOunceDetailView1() {
        return (FebricOunceDetailViewImpl)findViewObject("FebricOunceDetailView1");
    }

    /**
     * Container's getter for MnjMfgFebdetailsFkLink1.
     * @return MnjMfgFebdetailsFkLink1
     */
    public ViewLinkImpl getMnjMfgFebdetailsFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjMfgFebdetailsFkLink1");
    }

    /**
     * Container's getter for MnjMfgFabinsPtrnalocLView1.
     * @return MnjMfgFabinsPtrnalocLView1
     */
    public ViewObjectImpl getMnjMfgFabinsPtrnalocLView1() {
        return (ViewObjectImpl)findViewObject("MnjMfgFabinsPtrnalocLView1");
    }

    /**
     * Container's getter for ProdLinesPAtternAlocVL1.
     * @return ProdLinesPAtternAlocVL1
     */
    public ViewLinkImpl getProdLinesPAtternAlocVL1() {
        return (ViewLinkImpl)findViewLink("ProdLinesPAtternAlocVL1");
    }

    /**
     * Container's getter for MnjMfgFabinsPtrnalocDView1.
     * @return MnjMfgFabinsPtrnalocDView1
     */
    public ViewObjectImpl getMnjMfgFabinsPtrnalocDView1() {
        return (ViewObjectImpl)findViewObject("MnjMfgFabinsPtrnalocDView1");
    }

    /**
     * Container's getter for MnjMfgFabinsPtrnalocDFkLink1.
     * @return MnjMfgFabinsPtrnalocDFkLink1
     */
    public ViewLinkImpl getMnjMfgFabinsPtrnalocDFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjMfgFabinsPtrnalocDFkLink1");
    }


    public void populatePatternAloc() {


        ViewObject populatevo = getProdPatternAlocRolsVO1();
        // populatevo.executeQuery();

        Row[] r = populatevo.getAllRowsInRange();
        System.out.println("Drop ------->" + r.length);
        for (Row row : r) {

            if (row.getAttribute("PatFlag") != null &&
                row.getAttribute("PatFlag").equals("Y")) {
                setPatternAloc(row);
            }
        }
    }

    public void setPatternAloc(Row poprow) {


        Row linerow = createPattternLines();

        linerow.setAttribute("RollNo", getPopulateValue(poprow, "RollNo"));
        linerow.setAttribute("SupplierRollNo",
                             getPopulateValue(poprow, "SuppRollNo"));
        linerow.setAttribute("RollLength",
                             getPopulateValue(poprow, "RollLength"));

        linerow.setAttribute("ShrinkLength",
                             getPopulateValue(poprow, "ShrinkPrcLength"));
        linerow.setAttribute("ShrinkWidth",
                             getPopulateValue(poprow, "ShrinkPrcWidth")); //ShrinkWidth


    } //end of populateLines

    public Row createPattternLines() {

        ViewObject vo = getMnjMfgFabinsPtrnalocDView1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader

    /**
     * Container's getter for OperatingUnit1.
     * @return OperatingUnit1
     */
    public ViewObjectImpl getOperatingUnit1() {
        return (ViewObjectImpl)findViewObject("OperatingUnit1");
    }


    public double getFabIns() {

        ViewObject vo = getProdPageLinesVO1();
        String lineId = vo.getCurrentRow().getAttribute("ProdLId").toString();


        double val = 0;
        String stmt = "BEGIN :1 := mnj_fabric_ins_pkg.getfabounceOp(:2); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        int a = 0;
        try {
            cs.setString(2, lineId);
            cs.registerOutParameter(1, OracleTypes.NUMBER);
            cs.execute();
            val = cs.getDouble(1);
            cs.close();
        } catch (Exception e) {
            //status = e.getMessage();
            ;
        }


        return val;


    }

    public void creatFabricOunceLine() {

        ViewObject vo = getFebricOunceLineView1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);

        //   row.setAttribute("RequireFabricOunce", getFabIns());
        row.setAttribute("RequireFabricOunce", getFabOunce());

    }

    /* Range Searching */

    public String getMinLength() {

        ViewObject vo = getMnjMfgFabinsPtrnalocLView1();

        String color = null;

        try {
            color =
                    vo.getCurrentRow().getAttribute("LengthWiseFrom").toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return color;

    }

    public String getMaxLength() {

        ViewObject vo = getMnjMfgFabinsPtrnalocLView1();

        String color = null;

        try {
            color = vo.getCurrentRow().getAttribute("LengthWiseTo").toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return color;

    }

    public String getMinWidth() {

        ViewObject vo = getMnjMfgFabinsPtrnalocLView1();

        String color = null;

        try {
            color =
                    vo.getCurrentRow().getAttribute("WidthWiseFrom").toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return color;

    }

    public String getMaxWidth() {

        ViewObject vo = getMnjMfgFabinsPtrnalocLView1();

        String color = null;

        try {
            color = vo.getCurrentRow().getAttribute("WidthWiseTo").toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return color;

    }

    public String getFabOunce() {

        ViewObject vo = getProdPageLinesVO1();

        String FabOunce = null;

        try {
            FabOunce = vo.getCurrentRow().getAttribute("FabOunce").toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return FabOunce;

    }

    /* End Range Searching */

    /*
    public double getTotalRollYardLengthBal() {

        double totalRoll = 0.0, totalYrds = 0.0;
        System.out.println("Type in Header ID------->"+getHeaderId());
        System.out.println("Type in Color ------->"+getColor());
        String stmt =
            "BEGIN  mnj_fabric_ins_pkg.getInvTotalRollsYards(:1, :2, :3 , :4); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        int a = 0;
        try {
            cs.registerOutParameter(3, OracleTypes.NUMBER);
            cs.registerOutParameter(4, OracleTypes.NUMBER);
            cs.setString(1, getHeaderId());
            cs.setString(2, getColor());

            cs.execute();
            totalRoll = cs.getDouble(3);
            totalYrds = cs.getDouble(4);
            cs.close();
        } catch (Exception e) {
            //status = e.getMessage();
            ;
        }
        System.out.println("Rolls - >" + totalRoll);
        System.out.println("Yards - >" + totalYrds);
        if (type.equalsIgnoreCase("R")) {
            return totalRoll;
        } else if (type.equalsIgnoreCase("Y")) {
            return totalYrds;
        }

        return 0;


    }


   */


    public void SelectAllLinesPatAlloc(String flag) {


        ViewObject populatevo = getProdPatternAlocRolsVO1();
        //populatevo.executeQuery();

        //Row[] r = populatevo.getAllRowsInRange();
        RowSetIterator it = populatevo.createRowSetIterator("yy");


        while (it.hasNext()) {
            Row row = it.next();

            row.setAttribute("PatFlag", flag);


        }
        it.closeRowSetIterator();
    }

    public void SmartCalculation() {

        System.out.println("In Procedure");
        getDBTransaction().commit();

        String HeaderId = getHeaderId();
        System.out.println("Header Id    " + HeaderId);
        String status = null;
        String stmt =
            "BEGIN mnj_fabric_ins_pkg.getSmartCalculations(:1); end;";
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);

        try {
            cs.setString(1, HeaderId);
            cs.execute();
            cs.close();
        } catch (Exception e) {
            status = e.getMessage();
            System.out.println("In Error" + status);
            ;
        }

        ExecuteBlocks();

    }

    public void ExecuteBlocks() {
        ViewObject vo = getFabricShrinkLines1();
        ViewObject vo1 = getProdPageLinesVO1();

        vo.executeQuery();
        vo1.executeQuery();

    }

    public void getRollSerialNo() {

        getDBTransaction().commit();

        ViewObject vo = getInvPageLinesVO1();
        String detailId = vo.getCurrentRow().getAttribute("LineId").toString();

        String status = null;
        String stmt =
            "BEGIN mnj_fabric_ins_pkg.getRollSerialNumber(:1); end;"; // also include Roll Length Yards Inches
        java.sql.CallableStatement cs =
            getDBTransaction().createCallableStatement(stmt, 1);
        int a = 0;
        try {
            cs.setString(1, detailId);
            cs.execute();
            cs.close();
        } catch (Exception e) {
            //status = e.getMessage();
            ;
        }
        System.out.println("Value Flag--->" + status);

        ViewObject vo1 = getInvPageLinesDet2VO1();
        vo1.executeQuery();


    }

    public int RollTransfer() {

        getDBTransaction().commit();

        String Transfer_Org;

        ViewObject vo = getHeaderVO1();
        String HeaderId =
            vo.getCurrentRow().getAttribute("HeaderId").toString();

        System.out.println("HeaderId    " + HeaderId);

        try {
            Transfer_Org =
                    vo.getCurrentRow().getAttribute("RollTransferOrganization").toString();
        } catch (Exception e) {
            Transfer_Org = "null";
            e.printStackTrace();
        }
        int value = 0;

        if (Transfer_Org.equals("null"))

        {
            FacesContext context = FacesContext.getCurrentInstance();
            FacesMessage message =
                new FacesMessage("Roll Transfer Organization can't be null. Transferred Failed!!");
            context.addMessage(null, message);
        } else {
            String stmt =
                "BEGIN :1 :=  mnj_fabric_ins_pkg.TRANSFERROLLS_THROUGH_VERSION(:2); end;";
            java.sql.CallableStatement cs =
                getDBTransaction().createCallableStatement(stmt, 1);
            int a = 0;
            try {
                cs.setString(2, HeaderId);
                cs.registerOutParameter(1, OracleTypes.INTEGER);
                cs.execute();
                value = cs.getInt(1);
                cs.close();
            } catch (Exception e) {
                //status = e.getMessage();
                ;
            }
            vo.executeQuery();
            ViewObject vo2 = getInvPageLinesDet2VO1();
            vo2.executeQuery();


        }
        return value;
    }

    public String RollTransferWhole() {
        getDBTransaction().commit();

        String Transfer_Org;

        ViewObject vo = getHeaderVO1();
        String HeaderId =
            vo.getCurrentRow().getAttribute("HeaderId").toString();

        System.out.println("HeaderId    " + HeaderId);

        try {
            Transfer_Org =
                    vo.getCurrentRow().getAttribute("RollTransferOrganization").toString();
        } catch (Exception e) {
            Transfer_Org = "null";
            e.printStackTrace();
        }

        String status = null;
        if (Transfer_Org.equals("null"))

        {
            FacesContext context = FacesContext.getCurrentInstance();
            FacesMessage message =
                new FacesMessage("Roll Transfer Organization can't be null. Transferred Failed!!");
            context.addMessage(null, message);
        } else {

            String stmt = "BEGIN mnj_fabric_ins_pkg.TRANSFERROLLS(:1); end;";
            java.sql.CallableStatement cs =
                getDBTransaction().createCallableStatement(stmt, 1);
            int a = 0;
            try {
                cs.setString(1, HeaderId);
                cs.execute();
                cs.close();
            } catch (Exception e) {
                //status = e.getMessage();
                ;
            }
            System.out.println("Value Flag--->" + status);

            ViewObject vo1 = getHeaderVO1();
            vo1.executeQuery();
        }

        return status;
    }


    ///// Balance Pop - Up

    public void setPopUpWhereClauseBalance() {
        System.out.println("setPopUpWhereClauseBalance ------->");

        String HeaderId = getHeaderId();

        ViewObject vo = getNewBalancePopUp1();
        vo.setWhereClause("HEADER_ID = '" + HeaderId + "'");
        vo.executeQuery();

    }


    public void popupSelectActionListener() {
        System.out.println("OK");
        ViewObject fillSize = getInvPageLinesDet2VO1();
        RowSetIterator fillSizeRowSetIterator =
            fillSize.createRowSetIterator("fillSizeRowSetIterator");
        while (fillSizeRowSetIterator.hasNext()) {
            Row row = fillSizeRowSetIterator.next();
            row.setAttribute("TransferSelection", "Y");
            System.out.println("OK");
        }
        fillSizeRowSetIterator.closeRowSetIterator();
    }

    public void popupDeselectActionListener() {
        System.out.println("OK");
        ViewObject fillSize = getInvPageLinesDet2VO1();
        RowSetIterator fillSizeRowSetIterator =
            fillSize.createRowSetIterator("fillSizeRowSetIterator");
        while (fillSizeRowSetIterator.hasNext()) {
            Row row = fillSizeRowSetIterator.next();
            row.setAttribute("TransferSelection", "N");
            System.out.println("OK");
        }
        fillSizeRowSetIterator.closeRowSetIterator();
    }

    /**
     * Container's getter for NewBalancePopUp1.
     * @return NewBalancePopUp1
     */
    public NewBalancePopUpImpl getNewBalancePopUp1() {
        return (NewBalancePopUpImpl)findViewObject("NewBalancePopUp1");
    }


    public void RollTransfertoHeader()
    {
    
        //// Roll header part
        
        ViewObject populatevo = getTransferRollHeaderVO1();
        String HeaderIdRoll = "null";
        String flag;
        if (populatevo.getRowCount() == 0);
        RowSetIterator it = populatevo.createRowSetIterator("aaa");
        Row r[] = populatevo.getAllRowsInRange();
        for (Row row : r) {
            System.out.println("loop count");
            try {
                flag = row.getAttribute("TransferHeaderFlag").toString();
                System.out.println("Flag Code -->" + flag);
                if (flag.equals("Y"))
              
               HeaderIdRoll = row.getAttribute("HeaderId").toString();

            } catch (Exception e)
            {
              ;
            }


        }
           it.closeRowSetIterator();
           
  //// Roll Detail part End
           
  //// Roll header part
  
  ViewObject FabShrinkL = getFabricShrinkLines1();
  String RollLineId= "null";
  String flagFabShrinkL;
  int Result;
  if (FabShrinkL.getRowCount() == 0);
  RowSetIterator itFabShrinkL = FabShrinkL.createRowSetIterator("bbb");
  Row rFabShrinkL[] = FabShrinkL.getAllRowsInRange();
  for (Row rowFabShrinkL : rFabShrinkL) {
      System.out.println("loop count");
      try {
          flagFabShrinkL = rowFabShrinkL.getAttribute("TransferRollFlag").toString();
          System.out.println("Flag Code -->" + flagFabShrinkL);
          if (flagFabShrinkL.equals("Y"))
        
         RollLineId = rowFabShrinkL.getAttribute("LineId").toString();
          
          String stmt =
              "BEGIN :1 :=  mnj_fabric_ins_pkg.TRANSFERROLL_STYLE_TO_STYLE(:2,:3); end;";
          java.sql.CallableStatement cs =
              getDBTransaction().createCallableStatement(stmt, 1);
          int a = 0;
          try {
              cs.setString(2, HeaderIdRoll);
              cs.setString(3, RollLineId);
              cs.registerOutParameter(1, OracleTypes.INTEGER);
              cs.execute();
              Result = cs.getInt(1);
              cs.close();
          } catch (Exception e) {
              //status = e.getMessage();
              ;
          }  
          
          

      } catch (Exception e)
      {
        ;
      }


  }
     itFabShrinkL.closeRowSetIterator();
     FabShrinkL.executeQuery();
  //// Roll Detail part End

         }
    
    /**
     * Container's getter for RollTransferHistoryVO1.
     * @return RollTransferHistoryVO1
     */
    public ViewObjectImpl getRollTransferHistoryVO1() {
        return (ViewObjectImpl)findViewObject("RollTransferHistoryVO1");
    }

    /**
     * Container's getter for RollTransferHistoryVL1.
     * @return RollTransferHistoryVL1
     */
    public ViewLinkImpl getRollTransferHistoryVL1() {
        return (ViewLinkImpl)findViewLink("RollTransferHistoryVL1");
    }

    /**
     * Container's getter for InvoiceVo1.
     * @return InvoiceVo1
     */
    public ViewObjectImpl getInvoiceVo1() {
        return (ViewObjectImpl)findViewObject("InvoiceVo1");
    }

    /**
     * Container's getter for header_vs_InvoiceVo_vl1.
     * @return header_vs_InvoiceVo_vl1
     */
    public ViewLinkImpl getheader_vs_InvoiceVo_vl1() {
        return (ViewLinkImpl)findViewLink("header_vs_InvoiceVo_vl1");
    }

    /**
     * Container's getter for MnjMfgFabinsDetailTempVO1.
     * @return MnjMfgFabinsDetailTempVO1
     */
    public ViewObjectImpl getMnjMfgFabinsDetailTempVO1() {
        return (ViewObjectImpl)findViewObject("MnjMfgFabinsDetailTempVO1");
    }

    /**
     * Container's getter for ProdShadeRollsVO1.
     * @return ProdShadeRollsVO1
     */
    public ViewObjectImpl getProdShadeRollsVO1() {
        return (ViewObjectImpl)findViewObject("ProdShadeRollsVO1");
    }

    /**
     * Container's getter for ProdPageLineVOvsProdShadeRollsVO1.
     * @return ProdPageLineVOvsProdShadeRollsVO1
     */
    public ViewLinkImpl getProdPageLineVOvsProdShadeRollsVO1() {
        return (ViewLinkImpl)findViewLink("ProdPageLineVOvsProdShadeRollsVO1");
    }

    /**
     * Container's getter for ProdFbShrnkRollVO1.
     * @return ProdFbShrnkRollVO1
     */
    public ViewObjectImpl getProdFbShrnkRollVO1() {
        return (ViewObjectImpl)findViewObject("ProdFbShrnkRollVO1");
    }

    /**
     * Container's getter for ProdPageLineVOvsProdFbShrnkRollVO1.
     * @return ProdPageLineVOvsProdFbShrnkRollVO1
     */
    public ViewLinkImpl getProdPageLineVOvsProdFbShrnkRollVO1() {
        return (ViewLinkImpl)findViewLink("ProdPageLineVOvsProdFbShrnkRollVO1");
    }

    /**
     * Container's getter for FabOuncePopUpVO1.
     * @return FabOuncePopUpVO1
     */
    public FabOuncePopUpVOImpl getFabOuncePopUpVO1() {
        return (FabOuncePopUpVOImpl)findViewObject("FabOuncePopUpVO1");
    }

    /**
     * Container's getter for ProdPageLineVOvsFabOuncePopUpVO1.
     * @return ProdPageLineVOvsFabOuncePopUpVO1
     */
    public ViewLinkImpl getProdPageLineVOvsFabOuncePopUpVO1() {
        return (ViewLinkImpl)findViewLink("ProdPageLineVOvsFabOuncePopUpVO1");
    }

    /**
     * Container's getter for ProdPatternAlocRolsVO1.
     * @return ProdPatternAlocRolsVO1
     */
    public ViewObjectImpl getProdPatternAlocRolsVO1() {
        return (ViewObjectImpl)findViewObject("ProdPatternAlocRolsVO1");
    }

    /**
     * Container's getter for ProdPageLineVOvsProdPatternAlocRolsVO1.
     * @return ProdPageLineVOvsProdPatternAlocRolsVO1
     */
    public ViewLinkImpl getProdPageLineVOvsProdPatternAlocRolsVO1() {
        return (ViewLinkImpl)findViewLink("ProdPageLineVOvsProdPatternAlocRolsVO1");
    }

    /**
     * Container's getter for TransferRollHeaderVO1.
     * @return TransferRollHeaderVO1
     */
    public TransferRollHeaderVOImpl getTransferRollHeaderVO1() {
        return (TransferRollHeaderVOImpl)findViewObject("TransferRollHeaderVO1");
    }


    public void SelectAllRoll(String flag) {


        ViewObject popupvo = getFillRollNewVO2();
        //populatevo.executeQuery();

        //Row[] r = populatevo.getAllRowsInRange();
        RowSetIterator it = popupvo.createRowSetIterator("yy");


        while (it.hasNext()) {
            Row row = it.next();

            row.setAttribute("SelctionBox", flag);
            System.out.println("Show Flag --> " + flag);
        }
        it.closeRowSetIterator();

    }
    
    public void resetViewObject() {
        ViewObject vo1 = getFillRollNewVO2();
        
    //        String Query = vo.getQuery();
    //        System.out.println("Pop Up Query ---> " + Query);
    //        vo.reset();
        vo1.executeQuery();
        
        
        
        }


    /**
     * Container's getter for FillRollNewVO2.
     * @return FillRollNewVO2
     */
    public ViewObjectImpl getFillRollNewVO2() {
        return (ViewObjectImpl)findViewObject("FillRollNewVO2");
    }

    /**
     * Container's getter for HeaderVO_vs_FillRollNewVO_ViewLink1.
     * @return HeaderVO_vs_FillRollNewVO_ViewLink1
     */
    public ViewLinkImpl getHeaderVO_vs_FillRollNewVO_ViewLink1() {
        return (ViewLinkImpl)findViewLink("HeaderVO_vs_FillRollNewVO_ViewLink1");
    }

    /**
     * Container's getter for FilterView1.
     * @return FilterView1
     */
    public ViewObjectImpl getFilterView1() {
        return (ViewObjectImpl)findViewObject("FilterView1");
    }

    /**
     * Container's getter for InvStyleVO1.
     * @return InvStyleVO1
     */
    public ViewObjectImpl getInvStyleVO1() {
        return (ViewObjectImpl)findViewObject("InvStyleVO1");
    }

    /**
     * Container's getter for HeaderVO_vs_InvStyleVO_ViewLink1.
     * @return HeaderVO_vs_InvStyleVO_ViewLink1
     */
    public ViewLinkImpl getHeaderVO_vs_InvStyleVO_ViewLink1() {
        return (ViewLinkImpl)findViewLink("HeaderVO_vs_InvStyleVO_ViewLink1");
    }

    /**
     * Container's getter for MnjSkewMovementVO1.
     * @return MnjSkewMovementVO1
     */
    public ViewObjectImpl getMnjSkewMovementVO1() {
        return (ViewObjectImpl)findViewObject("MnjSkewMovementVO1");
    }

    /**
     * Container's getter for MnjSkewMovementFkLink1.
     * @return MnjSkewMovementFkLink1
     */
    public ViewLinkImpl getMnjSkewMovementFkLink1() {
        return (ViewLinkImpl)findViewLink("MnjSkewMovementFkLink1");
    }


    /**
     * Container's getter for MnjSkewMovementDVO1.
     * @return MnjSkewMovementDVO1
     */
    public ViewObjectImpl getMnjSkewMovementDVO1() {
        return (ViewObjectImpl)findViewObject("MnjSkewMovementDVO1");
    }

    /**
     * Container's getter for MnjSkewMovementDFk1Link1.
     * @return MnjSkewMovementDFk1Link1
     */
    public ViewLinkImpl getMnjSkewMovementDFk1Link1() {
        return (ViewLinkImpl)findViewLink("MnjSkewMovementDFk1Link1");
    }


    /**
     * Container's getter for RollForSkewMovementVO1.
     * @return RollForSkewMovementVO1
     */
    public ViewObjectImpl getRollForSkewMovementVO1() {
        return (ViewObjectImpl)findViewObject("RollForSkewMovementVO1");
    }

    /**
     * Container's getter for ProdPageLineVSRollForSkewMovement1.
     * @return ProdPageLineVSRollForSkewMovement1
     */
    public ViewLinkImpl getProdPageLineVSRollForSkewMovement1() {
        return (ViewLinkImpl)findViewLink("ProdPageLineVSRollForSkewMovement1");
    }

    /**
     * Container's getter for InvoiceWiseSupplierLOV1.
     * @return InvoiceWiseSupplierLOV1
     */
    public ViewObjectImpl getInvoiceWiseSupplierLOV1() {
        return (ViewObjectImpl)findViewObject("InvoiceWiseSupplierLOV1");
    }

}
